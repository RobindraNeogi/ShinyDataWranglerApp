kmm <- kmeans(X, 8)
D <- daisy(X)
plot(silhouette(kmm$cluster, D), col=1:8)
require(cluster)
X <- EuStockMarkets
kmm <- kmeans(X, 8)
D <- daisy(X)
plot(silhouette(kmm$cluster, D), col=1:8, border=NA)
require(cluster)
X <- workingdata22
kmm <- kmeans(X, 8)
D <- daisy(X)
plot(silhouette(kmm$cluster, D), col=1:8, border=NA)
require(cluster)
X <- workingdata22
kmm <- kmeans(X, 3)
D <- daisy(X)
plot(silhouette(kmm$cluster, D), col=1:8, border=NA)
require(cluster)
X <- workingdata22
kmm <- kmeans(X, 3)
D <- daisy(X)
plot(silhouette(kmm$cluster, D), col=1:3, border=NA)
source('~/.active-rstudio-document')
require(cluster)
X <- workingdata22
kmm <- kmeans(X, 3)
D <- daisy(X)
plot(silhouette(kmm$cluster, D), col=cluster, border=NA)
require(cluster)
X <- workingdata22
kmm <- kmeans(X, 3)
D <- daisy(X)
plot(silhouette(kmm$cluster, D), col=kmm$cluster, border=NA)
plot(silhouette(kmm$cluster, D), border=NA)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(data=workingdata, aes
(x=Area, y=workingdata[input$region])) +
geom_bar(stat="identity")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p
ggplot(data=workingdata, aes
(x=Area, y=Population)) +
geom_bar(stat="identity")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p
ggplot(data=workingdata, aes
(x=Area, y=Population)) +
geom_bar(stat="identity")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p
runApp()
runApp()
runApp()
runApp()
install.packages('NbClust'')
install.packages('NbClust')
View(workingdata23)
View(workingdata22)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method = complete, index = "silhouette")
library(NbClust)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method = complete, index = "silhouette")
library(NbClust)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method = complete, index = "silhouette")
library(NbClust)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method =complete, index = "silhouette")
library(NbClust)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method =NULL, index = "silhouette")
library(NbClust)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method ="complete", index = "silhouette")
nb <- NbClust(iris.scaled, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
# Print the result
nb
fviz_nbclust(nb) + theme_minimal()
library(NbClust)
nb <- NbClust(iris.scaled, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
# Print the result
nb
fviz_nbclust(nb) + theme_minimal()
install.packages('factoextra')
library(NbClust)
nb <- NbClust(iris.scaled, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
# Print the result
nb
fviz_nbclust(nb) + theme_minimal()
library(NbClust)
library(factoextra)
nb <- NbClust(iris.scaled, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
# Print the result
nb
fviz_nbclust(nb) + theme_minimal()
nb <- NbClust(iris.scaled, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
library(NbClust)
library(factoextra)
nb <- NbClust(workingdata22, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
# Print the result
nb
fviz_nbclust(nb) + theme_minimal()
nb <- NbClust(workingdata22, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
library(NbClust)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method ="complete", index = "silhouette")
runApp()
library(NbClust)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method ="complete", index = "silhouette")
runApp()
runApp()
runApp()
runApp()
runApp()
library(NbClust)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method ="complete", index = "silhouette")
res.nb # print the results
runApp()
library(NbClust)
summary(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
library(NbClust)
(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
library(NbClust)
(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
res.nb$Best.nc
library(NbClust)
(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
print(res.nb$Best.nc)
library(NbClust)
(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
print(NbClust$Best.nc)
library(NbClust)
(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
print(NbClust()$Best.nc)
library(NbClust)
(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
print(NbClust()res.nb$Best.nc)
library(NbClust)
(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
res.nb$Best.nc
library(NbClust)
(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
res.nb$Best.nc
library(NbClust)
nb<-(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
print(nb)
print(nb$best.nc)
library(NbClust)
nb<-(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
print(nb$best.nc)
ibrary(NbClust)
nb<-(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
library(NbClust)
nb<-(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
library(NbClust)
nb<-(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
print(nb)
print(nb$All.index)
print(nb$All.index)
print(nb$Best.nc)
print(nb$Best.nc)
print(nb$Best.nc[,1])
print(nb$Best.nc[1])
print(nb$Best.nc[1])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nb$Best.nc[1]
runApp()
library(NbClust)
nb2 <- NbClust(workingdata22, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
library(NbClust)
nb2 <- NbClust(workingdata22, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
library(NbClust)
nb2 <- NbClust(workingdata22, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
shiny::runApp()
runApp()
library(readr)
wgadata <- read_csv("~/Desktop/wgadata-2.csv")
View(wgadata)
runApp()
View(ContextualData)
View(ContextualData)
runApp()
library(readr)
ImportedData <- read_csv("~/Desktop/wgadata-2.csv")
View(ImportedData)
runApp()
ImportedData <-read.csv("/Users/datascience4/Documents/datatool/wgadata.csv",header=TRUE)
View(ImportedData)
View(ImportedData)
runApp()
View(wgadata)
ImportedData<-wgadata
runApp()
View(ImportedData)
View(wgadata)
View(ImportedData)
View(wgadata)
View(wgadata)
View(wgadata)
View(wgadata)
View(wgadata)
View(ImportedData)
DefinitionsData<-ImportedData
DefinitionsData<-DefinitionsData[,-c(1,8)]
DefinitionsData <- unique(DefinitionsData)
DefinitionsData2<-DefinitionsData
DefinitionsData2$ID2<-DefinitionsData2$ID
DefinitionsData$All<-DefinitionsData$ID
runApp()
ImportedData <-read.csv("/Users/datascience4/Documents/datatool/wgadata.csv",header=TRUE)
runApp()
View(workingdata)
View(workingdata)
ContextualData2<-ConteztualData
ContextualData2<-ContextualData
ContextualData<-workingdata
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(readr)
DefinitionsData <- read_csv("~/Downloads/Definitions (1).csv",
col_types = cols(X1 = col_skip()))
View(DefinitionsData)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(mtcars)
View(iris)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
