runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
barchartdata<-workingdata[ -c(1:5) ]
View(barchartdata)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
library(readr)
workingdata <- read_csv("~/Documents/ShinyApp/workingdata.csv")
View(workingdata)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
instal.packages('plotly')
install.packages('plotly')
install.packages("plotly")
shiny::runApp()
runApp()
runApp()
runApp()
View(workingdata)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
clusters <-kmeans((workingdata)[-(1:5)])
workingdata22<-workingdata[,-c(1,2,3,4,5)]
View(workingdata22)
View(workingdata22)
clusters <-kmeans(workingdata22)
lusters <-kmeans(workingdata22,3)
clusters<-kmeans(workingdata22,3)
view(clusters)
View(clusters)
print(clusters)
test<-cbind(workingdata22,clusters)
test<-cbind(workingdata22,workingdata)
View(test)
print(clusters)
print(cluster()$cluster)
print(clusters()$cluster)
print(clusters)
print(cluster)
test<-cbind(workingdata,clusters$cluster)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library (cluster)
library (vegan)
data(varespec)
dis = vegdist(varespec)
res = pam(dis,3) # or whatever your choice of clustering algorithm is
sil = silhouette (res$clustering,dis) # or use your cluster vector
windows() # RStudio sometimes does not display silhouette plots correctly
plot(sil)
install.packages('vegan')
library (cluster)
library (vegan)
data(varespec)
dis = vegdist(varespec)
res = pam(dis,3) # or whatever your choice of clustering algorithm is
sil = silhouette (res$clustering,dis) # or use your cluster vector
windows() # RStudio sometimes does not display silhouette plots correctly
plot(sil)
View(workingdata22)
clusters<-(kmeans(workingdata22))
clusters<-(kmeans(workingdata22,3))
library (vegan)
library (cluster)
data(workingdata22)
dis = dist(workingdata22)^2
res = kmeans(workingdata22,3)
sil = silhouette (res$cluster, dis)
windows()
plot(sil)
res = kmeans(workingdata22,2)
library (vegan)
library (cluster)
data(workingdata22)
dis = dist(workingdata22)^2
res = kmeans(workingdata22,2)
sil = silhouette (res$cluster, dis)
windows()
plot(sil)
data(workingdata22)
dis = dist(workingdata22)^2
res = kmeans(workingdata22,2)
sil = silhouette (res$cluster, dis)
windows()
plot(sil)
library (vegan)
data(varespec)
dis = vegdist(varespec)
res = pam(dis,3) # or whatever your choice of clustering algorithm is
sil = silhouette (res$clustering,dis) # or use your cluster vector
windows() # RStudio sometimes does not display silhouette plots correctly
plot(sil)
data(workingdata22)
dis = vegdist(workingdata22)
res = pam(dis,3) # or whatever your choice of clustering algorithm is
sil = clusters$cluster # or use your cluster vector
windows() # RStudio sometimes does not display silhouette plots correctly
plot(sil)
library (vegan)
library (cluster)
data(workingdata22)
dis = dist(workingdata22)^2
res = kmeans(workingdata22,3)
sil = clusters$cluster
windows()
plot(sil)
library (vegan)
library (cluster)
data(workingdata22)
dis = dist(workingdata22)^2
res = kmeans(workingdata22,3)
sil = clusters$cluster
windows()
plot(sil)
library (vegan)
library (cluster)
data(workingdata22)
dis = dist(workingdata22)^2
res = kmeans(workingdata22,3)
sil = clusters$cluster
windows()
plot(sil)
library (vegan)
library (cluster)
data(workingdata22)
dis = dist(workingdata22)^2
res = kmeans(workingdata22,3)
sil = clusters$cluster
windows()
plot(sil)
View(workingdata22)
workingdata22<workingdata22[,-c(1:7)]
View(workingdata22)
workingdata23<-workingdata22[,-c(1:7)]
View(workingdata23)
library (vegan)
library (cluster)
data(workingdata23)
dis = dist(workingdata23)^2
res = kmeans(workingdata23,3)
sil = clusters$cluster
windows()
plot(sil)
library (vegan)
library (cluster)
data(workingdata23)
dis = dist(workingdata23)^2
res = kmeans(workingdata23,3)
sil = clusters$cluster
windows()
plot(sil)
library (vegan)
library (cluster)
data(workingdata23)
dis = dist(workingdata23)^2
res = kmeans(workingdata23,3)
sil = clusters$cluster
windows()
plot(sil)
require(cluster)
X <- EuStockMarkets
kmm <- kmeans(X, 8)
D <- daisy(X)
plot(silhouette(kmm$cluster, D), col=1:8)
require(cluster)
X <- EuStockMarkets
kmm <- kmeans(X, 8)
D <- daisy(X)
plot(silhouette(kmm$cluster, D), col=1:8, border=NA)
require(cluster)
X <- workingdata22
kmm <- kmeans(X, 8)
D <- daisy(X)
plot(silhouette(kmm$cluster, D), col=1:8, border=NA)
require(cluster)
X <- workingdata22
kmm <- kmeans(X, 3)
D <- daisy(X)
plot(silhouette(kmm$cluster, D), col=1:8, border=NA)
require(cluster)
X <- workingdata22
kmm <- kmeans(X, 3)
D <- daisy(X)
plot(silhouette(kmm$cluster, D), col=1:3, border=NA)
source('~/.active-rstudio-document')
require(cluster)
X <- workingdata22
kmm <- kmeans(X, 3)
D <- daisy(X)
plot(silhouette(kmm$cluster, D), col=cluster, border=NA)
require(cluster)
X <- workingdata22
kmm <- kmeans(X, 3)
D <- daisy(X)
plot(silhouette(kmm$cluster, D), col=kmm$cluster, border=NA)
plot(silhouette(kmm$cluster, D), border=NA)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ggplot(data=workingdata, aes
(x=Area, y=workingdata[input$region])) +
geom_bar(stat="identity")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p
ggplot(data=workingdata, aes
(x=Area, y=Population)) +
geom_bar(stat="identity")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p
ggplot(data=workingdata, aes
(x=Area, y=Population)) +
geom_bar(stat="identity")+
theme(axis.title.x=element_blank(),
axis.text.x=element_blank(),
axis.ticks.x=element_blank())
p
runApp()
runApp()
runApp()
runApp()
install.packages('NbClust'')
install.packages('NbClust')
View(workingdata23)
View(workingdata22)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method = complete, index = "silhouette")
library(NbClust)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method = complete, index = "silhouette")
library(NbClust)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method = complete, index = "silhouette")
library(NbClust)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method =complete, index = "silhouette")
library(NbClust)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method =NULL, index = "silhouette")
library(NbClust)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method ="complete", index = "silhouette")
nb <- NbClust(iris.scaled, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
# Print the result
nb
fviz_nbclust(nb) + theme_minimal()
library(NbClust)
nb <- NbClust(iris.scaled, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
# Print the result
nb
fviz_nbclust(nb) + theme_minimal()
install.packages('factoextra')
library(NbClust)
nb <- NbClust(iris.scaled, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
# Print the result
nb
fviz_nbclust(nb) + theme_minimal()
library(NbClust)
library(factoextra)
nb <- NbClust(iris.scaled, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
# Print the result
nb
fviz_nbclust(nb) + theme_minimal()
nb <- NbClust(iris.scaled, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
library(NbClust)
library(factoextra)
nb <- NbClust(workingdata22, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
# Print the result
nb
fviz_nbclust(nb) + theme_minimal()
nb <- NbClust(workingdata22, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
library(NbClust)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method ="complete", index = "silhouette")
runApp()
library(NbClust)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method ="complete", index = "silhouette")
runApp()
runApp()
runApp()
runApp()
runApp()
library(NbClust)
NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 2, max.nc = 9, method ="complete", index = "silhouette")
res.nb # print the results
runApp()
library(NbClust)
summary(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
library(NbClust)
(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
library(NbClust)
(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
res.nb$Best.nc
library(NbClust)
(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
print(res.nb$Best.nc)
library(NbClust)
(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
print(NbClust$Best.nc)
library(NbClust)
(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
print(NbClust()$Best.nc)
library(NbClust)
(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
print(NbClust()res.nb$Best.nc)
library(NbClust)
(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
res.nb$Best.nc
library(NbClust)
(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
res.nb$Best.nc
library(NbClust)
nb<-(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
print(nb)
print(nb$best.nc)
library(NbClust)
nb<-(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
print(nb$best.nc)
ibrary(NbClust)
nb<-(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
library(NbClust)
nb<-(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
library(NbClust)
nb<-(NbClust(data = workingdata22, diss = NULL, distance = "euclidean",
min.nc = 1, max.nc = 9, method ="complete", index = "silhouette"))
print(nb)
print(nb$All.index)
print(nb$All.index)
print(nb$Best.nc)
print(nb$Best.nc)
print(nb$Best.nc[,1])
print(nb$Best.nc[1])
print(nb$Best.nc[1])
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
nb$Best.nc[1]
runApp()
library(NbClust)
nb2 <- NbClust(workingdata22, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
library(NbClust)
nb2 <- NbClust(workingdata22, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
library(NbClust)
nb2 <- NbClust(workingdata22, distance = "euclidean", min.nc = 2,
max.nc = 10, method = "complete", index ="all")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
